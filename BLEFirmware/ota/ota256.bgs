# OTA example script
#
# This script is used to transfer image to internal flash. After booting into
# DFU mode, boot loader reads flash contents and flashes contents to module.
#
# Example OTA service contains two characteristics:
# - Control point characteristic
#       This is used to control flashing procedure. Write request must be used
#       to send commands, because some commands may take a while to process.
# - Data transfer characteristic
#       Firmware image is transferred through this characteristic. Use write
#       command procedure to achieve faster image upload.
#
# OTA Procedure:
# - User data flash region must be erased before uploading image
# - Upload image
#       Use Write Commands to transfer firmware image to Data transfer
#       characteristic.
#       NOTE! To simplify script, data must be aligned to 256 byte boundaries.
# - Flash image
#       Boot device to DFU mode by writing 0x03 byte to Control point
#       characteristic.

dim command
dim tmp(20)
dim data_len
dim curr_connection
dim dfu_pointer  # current pointer to flash location to upload firmware
dim erase_page   # current page to erase
const max_erase_page = 64

event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
	# Erase internal flash dedicated for OTA
    # For this to work, the script timeout has to be increased from the default
    # value in application configuration file (config.xml)
    erase_page = 0
    while erase_page < max_erase_page
        call flash_erase_page(erase_page)
        erase_page = erase_page + 1
    end while

    # Set device to advertisement mode and allow undirected connections
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

    # Initialize the DFU pointer
    dfu_pointer = 0
end

# Incoming data event listener
# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    # Save connection handle, is always 0 if only slave
    curr_connection = connection

    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
        # Command 4 : Power up external flash
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device
    if handle = ota_control then
        # Attribute is user attribute, reason is always write_request_user
        if value_len > 1 || offset > 0 then
            # Not a valid command -> report application error code : 0x80
            call attributes_user_write_response(connection, $80)
        else
            command = value_data(0:1)

            if command > 4 then # Unknown command -> report application error code : 0x80
                call attributes_user_write_response(curr_connection, $80)
            else
                if command = 3 then # Command 3 received -> Boot to DFU mode
                    call system_reset(1)
                else
                    # Other commands are not used, but still accepted in order
                    # to be compatible with the external flash OTA
                    # implementation
                    call attributes_user_write_response(curr_connection, $0)
                end if
            end if
        end if
    end if

    # Check if OTA data attribute is written which carries the firmware update
    # and store the data to the internal flash
    if handle = ota_data then
        call flash_write_data(dfu_pointer, value_len, value_data(0:value_len))
        dfu_pointer = dfu_pointer + value_len
    end if
end

# Disconnection event listener
event connection_disconnected(handle, result)
    # Makes the device visible and connectable
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end
